var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = Bonobo","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [Bonobo]","category":"page"},{"location":"reference/#Bonobo.initialize-Tuple{}","page":"Reference","title":"Bonobo.initialize","text":"initialize(; kwargs...)\n\nInitialize the branch and bound framework with the the following arguments. Later it can be dispatched on BnBTree{Node, Root, Solution} for various methods.\n\nKeyword arguments\n\ntraverse [:BFS] currently the only supported traverse strategy is BFS.\nNode DefaultNode can be special structure which is used to store all information about a node. \nneeds to have AbstractNode as the super type\nneeds to have std :: BnBNode as a field (see BnBNode)\nSolution DefaultSolution stores the node and several other information about a solution\nroot [nothing] the information about the root problem. The type can be used for dispatching on types \nsense [:Min] can be :Min or :Max depending on the objective sense\nValue [Vector{Float64}] the type of a solution  \n\nReturn a BnBTree object which is the input for optimize!.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Bonobo.optimize!-Tuple{BnBTree}","page":"Reference","title":"Bonobo.optimize!","text":"optimize!(tree::BnBTree)\n\nOptimize the problem using a branch and bound approach. \n\nThe steps are the following:\n\nwhile !terminated(tree) # as long as there are open nodes\n    # get the next open node depending on the traverse strategy\n    node = get_next_node(tree) \n    # needs to be implemented by you\n    # Should evaluate the current node and return the lower and upper bound\n    # if the problem is infeasible both values should be set to NaN\n    lb, ub = evaluate_node!(tree, node) \n    # updates the upper and lower bound of the node struct\n    set_node_bound!(tree.sense, node, lb, ub)\n\n    # update the best bound of the tree depending on the new upper bound of the node\n    # calls bound! to remove nodes from the tree with a worse bound\n    update_best_bound!(tree, node)\n    # update the best solution \n    update_best_solution!(tree, node)\n    \n    # remove the current node\n    close_node!(tree, node)\n    # needs to be implemented by you\n    # create branches from the current node\n    branch!(tree, node)\nend\n\nevery function of the above can be overriden by your own method. \n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Bonobo","category":"page"},{"location":"#Bonobo","page":"Home","title":"Bonobo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Bonobo.","category":"page"},{"location":"how_to/#How-To-Guide","page":"How-To","title":"How-To Guide","text":"","category":"section"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"}]
}
